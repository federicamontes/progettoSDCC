AWSTemplateFormatVersion: '2010-09-09'
Transform: 'AWS::Serverless-2016-10-31'
Description: 'A simple SiPY template for deploy'

Resources:

  #IAM Role
  AdminRole:
    Type: AWS::IAM::Role
    Properties:
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSConfigRole'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: AssumeRole1
            Effect: Allow
            Principal:
              Service: 'lambda.amazonaws.com'
            Action: 'sts:AssumeRole'
      Policies:
        - PolicyName: execution
          PolicyDocument:
            Statement:
              #AWSLambdaFullAccess
              - Effect: Allow
                Action:
                  - 'dynamodb:*'
                  - 'ec2:DescribeSecurityGroups'
                  - 'ec2:DescribeSubnets'
                  - 'ec2:DescribeVpcs'
                  - 'events:*'
                  - 'iam:GetPolicy'
                  - 'iam:GetPolicyVersion'
                  - 'iam:GetRole'
                  - 'iam:GetRolePolicy'
                  - 'iam:ListAttachedRolePolicies'
                  - 'iam:ListRolePolicies'
                  - 'iam:ListRoles'
                  - 'iam:PassRole'
                  - 'kms:ListAliases'
                  - 'lambda:*'
                  - 'logs:*'
                  - 's3:*'
                  - 'sns:ListSubscriptions'
                  - 'sns:ListSubscriptionsByTopic'
                  - 'sns:ListTopics'
                  - 'sns:Publish'
                  - 'sns:Subscribe'
                  - 'sns:Unsubscribe'
                  - 'sqs:ListQueues'
                  - 'sqs:SendMessage'
                  - 'tag:GetResources'
                  - 'xray:PutTelemetryRecords'
                  - 'xray:PutTraceSegments'
                Resource: "*"
              #AmazonAPIGatewayInvokeFullAccess
              - Effect: Allow
                Action:
                  - 'execute-api:Invoke'
                  - 'execute-api:ManageConnections'
                Resource: 'arn:aws:execute-api:*:*:*'
              - Effect: Allow
                Action:
                  - 'iam:CreateServiceLinkedRole'
                Resource: 'arn:aws:iam::*:role/aws-service-role/events.amazonaws.com/AWSServiceRoleForCloudWatchEvents*'
                Condition:
                  StringLike:
                    'iam:AWSServiceName': 'events.amazonaws.com'
              #AmazonAPIGatewayAdministrator
              - Effect: Allow
                Action:
                  - 'apigateway:*'
                Resource: 'arn:aws:apigateway:*::/*'
              #AWSLambdaExecute
              - Effect: Allow
                Action:
                  - 'logs:*'
                Resource: 'arn:aws:logs:*:*:*'
              - Effect: Allow
                Action:
                  - 's3:GetObject'
                  - 's3:PutObject'
                Resource: 'arn:aws:s3:::*'
              #AmazonLexFullAccess
              - Effect: Allow
                Action:
                  - 'cloudwatch:GetMetricStatistics'
                  - 'cloudwatch:DescribeAlarms'
                  - 'cloudwatch:DescribeAlarmsForMetric'
                  - 'kms:DescribeKey'
                  - 'kms:ListAliases'
                  - 'lambda:GetPolicy'
                  - 'lambda:ListFunctions'
                  - 'lex:*'
                  - 'polly:DescribeVoices'
                  - 'polly:SynthesizeSpeech'
                Resource: '*'
              - Effect: Allow
                Action:
                  - 'lambda:AddPermission'
                  - 'lambda:RemovePermission'
                Resource: 'arn:aws:lambda:*:*:function:AmazonLex*'
                Condition:
                  StringLike:
                    'lambda:Principal': 'lex.amazonaws.com'
              - Effect: Allow
                Action:
                  - 'iam:GetRole'
                  - 'iam:DeleteRole'
                Resource: '*'
              - Effect: Allow
                Action:
                  - 'iam:CreateServiceLinkedRole'
                Resource: 'arn:aws:iam::*:role/aws-service-role/lex.amazonaws.com/AWSServiceRoleForLexBots'
                Condition:
                  StringLike:
                    'iam:AWSServiceName': 'lex.amazonaws.com'
              - Effect: Allow
                Action:
                  - 'iam:DeleteServiceLinkedRole'
                  - 'iam:GetServiceLinkedRoleDeletionStatus'
                Resource: 'arn:aws:iam::*:role/aws-service-role/lex.amazonaws.com/AWSServiceRoleForLexBots'
              - Effect: Allow
                Action:
                  - 'iam:DetachRolePolicy'
                Resource: 'arn:aws:iam::*:role/aws-service-role/lex.amazonaws.com/AWSServiceRoleForLexBots'
                Condition:
                  StringLike:
                    'iam:PolicyArn': 'arn:aws:iam::aws:policy/aws-service-role/AmazonLexBotPolicy'
              - Effect: Allow
                Action:
                  - 'iam:CreateServiceLinkedRole'
                Resource: 'arn:aws:iam::*:role/aws-service-role/channels.lex.amazonaws.com/AWSServiceRoleForLexChannels'
                Condition:
                  StringLike:
                    'iam:AWSServiceName': 'channels.lex.amazonaws.com'
              - Effect: Allow
                Action:
                  - 'iam:DeleteServiceLinkedRole'
                  - 'iam:GetServiceLinkedRoleDeletionStatus'
                Resource: 'arn:aws:iam::*:role/aws-service-role/channels.lex.amazonaws.com/AWSServiceRoleForLexChannels'
              - Effect: Allow
                Action:
                  - 'iam:DetachRolePolicy'
                Resource: 'arn:aws:iam::*:role/aws-service-role/channels.lex.amazonaws.com/AWSServiceRoleForLexChannels'
                Condition:
                  StringLike:
                    'iam:PolicyArn': 'arn:aws:iam::aws:policy/aws-service-role/LexChannelPolicy'
                #AmazonSNSFullAccess
              - Effect: Allow
                Action:
                  - 'sns:*'
                Resource: '*'
      RoleName: 'AdminRole'

  #SNS topic
  QuoteSNSTopic:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: "TagSNSForQuote"

  #1_Lambda
  FindQuoteByCategoryAuthor:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: find_quote_category_author_sns.lambda_handler
      Runtime: python3.7
      CodeUri: ./target/FindQuoteByCategoryAuthor.zip
      Description: 'Lambda function for Category and Author research in MongoAtlas'
      MemorySize: 128
      Timeout: 80
      Role: !GetAtt AdminRole.Arn
      Events:
        CloudWatchEvent1:
          Type: CloudWatchEvent
          Properties:
            Pattern:
              source:
                - aws.sns
      Environment:
        Variables:
          MONGODB_ATLAS_CLUSTER_URI: >-
            mongodb+srv://adminMongoDB:adminMongoDB@clusterquotes-qnz49.mongodb.net/admin?retryWrites=true&w=majority
          SNS_TOPIC_ARN: !Ref QuoteSNSTopic

  #2_Lambda
  FindQuoteByTags:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: find_quotes_tags_sns.lambda_handler
      Runtime: python3.6
      CodeUri: ./target/FindQuoteByTags.zip
      Description: 'Lambda function for Tags research in MongoAtlas'
      MemorySize: 128
      Timeout: 130
      Role: !GetAtt AdminRole.Arn
      Events:
        CloudWatchEvent1:
          Type: CloudWatchEvent
          Properties:
            Pattern:
              source:
                - aws.sns
        SNS1:
          Type: SNS
          Properties:
            Topic: !Ref QuoteSNSTopic
      Environment:
        Variables:
          MONGODB_ATLAS_CLUSTER_URI: >-
            mongodb+srv://adminMongoDB:adminMongoDB@clusterquotes-qnz49.mongodb.net/admin?retryWrites=true&w=majority
          SLACK_CHANNEL: >-
            https://hooks.slack.com/services/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
          SNS_TOPIC_ARN: !Ref QuoteSNSTopic

  #3_lambda
  InsertNewQuote:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: insert_quote.handler
      Runtime: nodejs10.x
      CodeUri: ./target/InsertNewQuote.zip
      Description: 'Lambda function for execute insert new Quote in MongoAtlas'
      MemorySize: 128
      Timeout: 3
      Role: !GetAtt AdminRole.Arn
      Events:
        Api1:
          Type: Api
          Properties:
            Path: /
            Method: POST
            RestApiId:
              Ref: SlackEndPoint
      Environment:
        Variables:
          MONGODB_ATLAS_CLUSTER_URI: >-
            mongodb+srv://adminMongoDB:adminMongoDB@clusterquotes-qnz49.mongodb.net/admin?retryWrites=true&w=majority

  #SNS Subscription
  QuoteTopicSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      Endpoint: !GetAtt FindQuoteByTags.Arn
      Protocol: 'lambda'
      TopicArn: !Ref QuoteSNSTopic

  #API-Gateway
  SlackEndPoint:
    Type: 'AWS::Serverless::Api'
    Properties:
      StageName: test
      EndpointConfiguration: REGIONAL
      DefinitionBody:
        swagger: "2.0"
        info:
          version: "2019-10-07T16:51:57Z"
          title: "SlackEndPoint"
        host: "6p6lk2ld1k.execute-api.us-east-1.amazonaws.com"
        basePath: "/APIGateway"
        schemes:
        - "https"
        paths:
          /:
            post:
              consumes:
              - "application/x-www-form-urlencoded"
              produces:
              - "application/json"
              responses:
                '200':
                  description: "200 response"
                  schema:
                    $ref: "#/definitions/Empty"
              x-amazon-apigateway-integration:
                uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${InsertNewQuote.Arn}/invocations"
                responses:
                  default:
                    statusCode: "200"
                passthroughBehavior: "when_no_templates"
                httpMethod: "POST"
                requestTemplates:
                  application/x-www-form-urlencoded: "## convert HTML POST data or HTTP GET\
                    \ query string to JSON\n \n## get the raw post data from the AWS built-in\
                    \ variable and give it a nicer name\n#if ($context.httpMethod == \"POST\"\
                    )\n #set($rawAPIData = $input.path('$'))\n#elseif ($context.httpMethod\
                    \ == \"GET\")\n #set($rawAPIData = $input.params().querystring)\n #set($rawAPIData\
                    \ = $rawAPIData.toString())\n #set($rawAPIDataLength = $rawAPIData.length()\
                    \ - 1)\n #set($rawAPIData = $rawAPIData.substring(1, $rawAPIDataLength))\n\
                    \ #set($rawAPIData = $rawAPIData.replace(\", \", \"&\"))\n#else\n #set($rawAPIData\
                    \ = \"\")\n#end\n \n## first we get the number of \"&\" in the string,\
                    \ this tells us if there is more than one key value pair\n#set($countAmpersands\
                    \ = $rawAPIData.length() - $rawAPIData.replace(\"&\", \"\").length())\n\
                    \ \n## if there are no \"&\" at all then we have only one key value pair.\n\
                    ## we append an ampersand to the string so that we can tokenise it the\
                    \ same way as multiple kv pairs.\n## the \"empty\" kv pair to the right\
                    \ of the ampersand will be ignored anyway.\n#if ($countAmpersands == 0)\n\
                    \ #set($rawPostData = $rawAPIData + \"&\")\n#end\n \n## now we tokenise\
                    \ using the ampersand(s)\n#set($tokenisedAmpersand = $rawAPIData.split(\"\
                    &\"))\n \n## we set up a variable to hold the valid key value pairs\n\
                    #set($tokenisedEquals = [])\n \n## now we set up a loop to find the valid\
                    \ key value pairs, which must contain only one \"=\"\n#foreach( $kvPair\
                    \ in $tokenisedAmpersand )\n #set($countEquals = $kvPair.length() - $kvPair.replace(\"\
                    =\", \"\").length())\n #if ($countEquals == 1)\n  #set($kvTokenised =\
                    \ $kvPair.split(\"=\"))\n  #if ($kvTokenised[0].length() > 0)\n   ## we\
                    \ found a valid key value pair. add it to the list.\n   #set($devNull\
                    \ = $tokenisedEquals.add($kvPair))\n  #end\n #end\n#end\n \n## next we\
                    \ set up our loop inside the output structure \"{\" and \"}\"\n{\n#foreach(\
                    \ $kvPair in $tokenisedEquals )\n  ## finally we output the JSON for this\
                    \ pair and append a comma if this isn't the last pair\n  #set($kvTokenised\
                    \ = $kvPair.split(\"=\"))\n \"$util.urlDecode($kvTokenised[0])\" : #if($kvTokenised[1].length()\
                    \ > 0)\"$util.urlDecode($kvTokenised[1])\"#{else}\"\"#end#if( $foreach.hasNext\
                    \ ),#end\n#end\n}"
                contentHandling: "CONVERT_TO_TEXT"
                type: "aws"
        definitions:
          Empty:
            type: "object"
            title: "Empty Schema"
